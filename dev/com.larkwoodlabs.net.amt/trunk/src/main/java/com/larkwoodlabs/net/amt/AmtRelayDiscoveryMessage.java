/*
 * Copyright © 2009-2010 Larkwood Labs Software.
 *
 * Licensed under the Larkwood Labs Software Source Code License, Version 1.0.
 * You may not use this file except in compliance with this License.
 *
 * You may view the Source Code License at
 * http://www.larkwoodlabs.com/source-license
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the license.
 */

package com.larkwoodlabs.net.amt;

import java.nio.ByteBuffer;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.larkwoodlabs.common.exceptions.ParseException;
import com.larkwoodlabs.util.buffer.fields.IntegerField;
import com.larkwoodlabs.util.logging.Logging;

/**
 * An AMT relay discovery message.
 * <pre>
 * 6.1. AMT Relay Discovery
 * 
 *    The AMT Relay Discovery message is a UDP packet sent from the AMT
 *    gateway unicast address to the AMT relay anycast address to discover
 *    the unicast address of an AMT relay.
 * 
 *    The UDP source port is uniquely selected by the local host operating
 *    system.  The UDP destination port is the IANA reserved AMT port
 *    number.  The UDP checksum MUST be valid in AMT control messages.
 * 
 *    The payload of the UDP packet contains the following fields.
 * 
 *     0                   1                   2                   3
 *     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *    |     Type=0x1  |     Reserved                                  |
 *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 *    |            Discovery Nonce                                    |
 *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 * 
 * 6.1.1. Type
 * 
 *    The type of the message.
 * 
 * 6.1.2. Reserved
 * 
 *    A 24-bit reserved field.  Sent as 0, ignored on receipt.
 * 
 * 6.1.3. Discovery Nonce
 * 
 *    A 32-bit random value generated by the gateway and replayed by the
 *    relay.
 * </pre>
 * 
 * @author Gregory Bumgardner
 * 
 */
final class AmtRelayDiscoveryMessage extends AmtMessage {

    /*-- Inner Classes ------------------------------------------------------*/

    public static class Parser implements AmtMessage.ParserType {

        @Override
        public AmtMessage parse(ByteBuffer buffer) throws ParseException {
            return new AmtRelayDiscoveryMessage(buffer);
        }

        @Override
        public Object getKey() {
            return MESSAGE_TYPE;
        }

    }


    /*-- Static Variables ---------------------------------------------------*/

    public static final byte MESSAGE_TYPE = 0x1;
    public static final int BASE_MESSAGE_LENGTH = 8;

    public static final IntegerField RequestNonce = new IntegerField(4);


    /*-- Static Functions ---------------------------------------------------*/

    public static AmtRelayDiscoveryMessage.Parser constructParser() {
        return new AmtRelayDiscoveryMessage.Parser();
    }

    public static int createNonce() {
        double rand = Math.random();
        long range = 0x7FFFFFFF;
        double result = rand * range;
        return (int)result;
    }


    /*-- Member Functions ---------------------------------------------------*/

    /**
     * 
     */
    public AmtRelayDiscoveryMessage() {
        this(createNonce());
        
        if (logger.isLoggable(Level.FINE)) {
            logger.fine(Logging.entering(ObjectId, "AmtRelayDiscoveryMessage.AmtRelayDiscoveryMessage"));
        }
    }

    /**
     * 
     * @param discoveryNonce
     */
    public AmtRelayDiscoveryMessage(int discoveryNonce) {
        super(BASE_MESSAGE_LENGTH, MESSAGE_TYPE);
        
        if (logger.isLoggable(Level.FINER)) {
            logger.finer(Logging.entering(ObjectId, "AmtRelayDiscoveryMessage.AmtRelayDiscoveryMessage", discoveryNonce));
        }
        
        setDiscoveryNonce(discoveryNonce);
        
        if (logger.isLoggable(Level.FINE)) {
            logState(logger);
        }
    }

    /**
     * 
     * @param buffer
     * @throws ParseException
     */
    public AmtRelayDiscoveryMessage(ByteBuffer buffer) throws ParseException {
        super(consume(buffer, BASE_MESSAGE_LENGTH));
        
        if (logger.isLoggable(Level.FINER)) {
            logger.finer(Logging.entering(ObjectId, "AmtRelayDiscoveryMessage.AmtRelayDiscoveryMessage", buffer));
            logState(logger);
        }
    }

    @Override
    public void log(Logger logger) {
        super.log(logger);
        logState(logger);
    }
    
    /**
     * 
     * @param logger
     */
    private void logState(Logger logger) {
        logger.info(ObjectId + " : discovery-nonce="+getDiscoveryNonce());
    }

    @Override
    public Byte getType() {
        return MESSAGE_TYPE;
    }

    @Override
    public int getTotalLength() {
        return BASE_MESSAGE_LENGTH;
    }

    /**
     * 
     * @return
     */
    public int getDiscoveryNonce() {
        return RequestNonce.get(getBufferInternal());
    }

    /**
     * 
     * @param discoveryNonce
     */
    public void setDiscoveryNonce(int discoveryNonce) {
        
        if (logger.isLoggable(Level.FINER)) {
            logger.finer(Logging.entering(ObjectId, "AmtRelayDiscoveryMessage.setDiscoveryNonce", discoveryNonce));
        }
        
        RequestNonce.set(getBufferInternal(), discoveryNonce);
    }

}
